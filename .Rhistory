list <- c("flax", "onyx", "gray", "sand", "ruby", "iris", "palm", "pear", "rose", "mist", "gold", "silk", "cyan", "puce", "bole", "coal")
list
list <- t(list)
list
list <- t(list)
list
sort(list)
sorted <- t(t(list))
sorted
c(list, sorted)
list
sorted
sorted <- t(t(sort(list)))
sorted
list
sorted
log(.5)
log(.4)
log(10)/log(.3)
-log(10)/log(.3)
-log(10)/log(.7)
install.packages("ggplot2")
100^2
2^100
log(1)
floor(log(1))
x = 1:10
floor(log(x))
floor(log2(x))
getwd()
setwd("~/Documents/Online Courses/Coursera/Algorithms (Stanford)/Assignments/Assignment 6 - Sums")
fileName <- "algo1-programming_prob-2sum.txt"
a <- readLines(fileName)
head(a)
a <- as.numeric(readLines(fileName))
head(a)
source("week6_1.R")
source("week6_1.R")
data <- count2Sums()
head(count)
head(data)
source("week6_1.R")
data <- count2Sums()
found2Sums <- as.numeric()
found2Sums
found2Sums <- c(found2Sums, 1)
found2Sums
found2Sums <- c(found2Sums, 1)
found2Sums
for (i in -5:5){print(i)}
numRight <- length(dataSorted)
numRight
dataSorted(numRight)
source("week6_1.R")
data <- count2Sums()
source("week6_1.R")
data <- count2Sums(1)
data
data <- count2Sums(10000)
source("week6_2.R")
medians <- sumMedians()
source("week6_2.R")
medians <- sumMedians()
medians
fileName <- "Median.txt"
readLines("Median.txt")
source("week6_2.R")
medians <- sumMedians()
medians
sum(medians)
source("week6_1.R")
source("week6_2.R")
source("week6_1.R")
found2Sums <- count2Sums(5)
found2Sums
source("week6_1.R")
found2Sums <- count2Sums(-10000, -9990)
found2Sums
remove(a)
remove(dataSorted)
dataSorted <- loadSortData()
remove(dataSorted)
dataSorted <- loadSortData()
source("week6_1.R")
found2Sums <- count2Sums(-10000, 10000)
source("week6_2.R")
medians <- sumMedians()
sum(medians)
sum(sumMedians())
Sys.time(sum(sumMedians()))
system.time(sum(sumMedians()))
system.time(sum(sumMedians()))
system.time(sum(sumMedians()))
system.time(sum(sumMedians()))
source("week6_2.R")
medians()
dataSorted[c(1,1e6)]
pi
ln(.95)
log(.95)
log(1)
log(2)
log(.95)
gaussian
gaussian(1)
gaussian(inverse)
gaussian(link = "inverse")
ppois(10, lambda = 15)
a <- c(256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144)
b <- c(0, .002, .010, .052, .243, 1.178, 5.755, 27.612, 132.638, 641.222, 3105.091)
B <- plot(a,b)
B <- plot(log2(a), b)
plot(log2(a), log2(b))
B <- b/.002
B
length(b)
b[2:11] / b[1:10]
b[2:11] / (b[1:10] / 2)
b[2:11] / (b[1:10] * 2)
log2(b[2:11] / b[1:10])
mean(log2(b[2:11] / b[1:10])[7:10])
T = i
i
remove(i)
T <- i
oplex()
complex()
complex(1)
i
2i
1i
T<-1i
T
t <- 1
t <- c(1, 2, 4, 8, 16, 32, 64)
t
T
T[2] <- T[7*T[1] + 4]
T[2] <-7*T[1] + 4
T
T[3] <-7*T[2] + 16
T[4] <-7*T[3] + 64
T
T[5] <-7*T[4] + 256
t
T
sqirl()
swirl()
install.packages("swirl")
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
install_from_swirl("Reproducible Research")
install_from_swirl("Statistical Inference")
swirl()
32/36
33/36
deck
52
1/13
0
3/13
2/51
getwd()
setwd("~/Documents/Online Courses/Coursera/Data Science/5 - Reproducible Research/Assignment 1")
data <- read.csv("activity.csv")
data
names(data)
swirl()
.8
.64
.64
mypdf
integrate(mypdf, 0, 1.6)
sqrt(2)
.997*.001
.985*.999
.015*.999
.997*.001 / (.997*.001 + .015*.999)
setwd("~/Documents/Online Courses/Coursera/Data Science/5 - Reproducible Research/Assignment 1/RepData_PeerAssessment1")
filename <- "activity.csv"
file.exists(filename)
file.exists("filename")
!file.exists("filename")
zipName <- "activity.zip"
zipName
paste("repdata_data_", zipName)
paste("repdata_data_", zipName, sep = "")
data <- read.csv("activity.csv")
data
names(data)
data <- read.csv("activity.csv", header = T)
data <- read.csv("activity.csv", header = TRUE)
names(data)
head(data)
data <- read.csv("activity.csv")
head(data)
class(data)
aggregate(steps ~ date, data, sum)
head(data)
aggregate(data ~ steps, by = date, FUN = sum)
aggregate(data ~ steps, by = date, FUN = "sum")
aggregate(steps ~ date, data, sum)
stepsPerDay <- aggregate(data ~ steps, by = date, FUN = "sum")
stepsPerDay <- aggregate(steps ~ date, data, sum)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey',
cex.main = .9
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey',
cex.main = .9
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000)
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000),
col = 'grey'
)
length(stepsPerDay)
dim(stepsPerDay)
hist(
stepsPerDay$steps,
breaks = 53,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
dim(stepsPerDay$steps[1])
breaks = 53,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
dim(stepsPerDay$steps[1]),
breaks = 53,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = dim(stepsPerDay$steps[1]),
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = dim(stepsPerDay$steps)[1],
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
dim(stepsPerDat$steps)
dim(stepsPerDay$steps)
stepsPerDay
dim(stepsPerDay)
hist(
stepsPerDay$steps,
breaks = dim(stepsPerDay)[1],
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = dim(stepsPerDay)[1],
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
stepsPerDay
hist(
stepsPerDay$steps,
breaks = 10,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 15,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks =15,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000),
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 25000),
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000),
col = 'grey'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000),
col = 'blue'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
xlim = c(0, 22000),
col = 'red'
)
hist(
stepsPerDay$steps,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'red'
)
hist(
stepsPerDay$steps,
breaks = 18,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'red'
)
hist(
stepsPerDay$steps,
breaks = 20,
main = 'Total Number of Steps Taken Per Day',
xlab = 'Total Number of Steps',
col = 'red'
)
median(stepsPerDay$steps, na.rm = TRUE)
mean(stepsPerDay$steps, na.rm = TRUE)
head(data)
stepsPerInterval <- aggregate(steps ~ interval, data, sum)
head(stepsPerInterval)
stepsPerDayTotal <- aggregate(steps ~ date, data, sum)
stepsPerDayTotal
head(data)
length(unique(data$date))
unique(data$date)
unique(data[c("date","interval")])
60*60*24
60*60*24/5
length(unique(data[c("date","interval")]))
dim(unique(data[c("date","interval")]))
stepsPerIntervalTotal <- aggregate(steps ~ interval, data, sum)
plot(stepsPerIntervalTotal$interval,
stepsPerIntervalTotal$steps / numberOfDates,
type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps'
)
numberOfDates <- length(unique(data$date))
plot(stepsPerIntervalTotal$interval,
stepsPerIntervalTotal$steps / numberOfDates,
type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps'
)
plot(stepsPerIntervalTotal$interval,
stepsPerIntervalTotal$steps / numberOfDates,
type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps',
col = 'blue'
)
source("repdata_peer1.r")
repdata_peer1()
which.max(stepsPerIntervalTotal$steps)
stepsPerIntervalTotal$steps[104]
stepsPerIntervalTotal$steps[835]
length(stepsPerIntervalTotal$steps)
stepsPerIntervalTotal$interval[104]
sum(is.na(data$steps))
head(data)
stepsPerIntervalTotal
data2 <- data
replace(data2, 1, 100)
data2 <- data
replace(data2, [[1]][1], 100)
replace(data2$steps, 1, 100)
head(replace(data2$steps, 1, 100))
data2 <- data
is.na(data2$steps)
is.na(data2$steps) == TRUE
which(is.na(data2$steps))
a <- c(1,2,3,4)
a
replace(a, c(2,4), c(100, 200))
stepsPerIntervalTotal$Interval
stepsPerIntervalTotal$interval
head(data2)
2355/5
2354/12
2354/5
2360/5
length(stepsPerInterval$interval)
stepsPerIntervalTotal$steps[stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]] / numberOfDates
dataNoNA <- data
stepsPerIntervalTotal$steps[stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]] / numberOfDates
which(is.na(dataNoNA))
dataNoNA$interval(which(is.na(dataNoNA)))
dataNoNA$interval[which(is.na(dataNoNA))]
stepsPerIntervalTotal$interval
stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]
dataNoNA$interval[which(is.na(dataNoNA))]
replace(dataNoNA$steps, which(is.na(dataNoNA)), stepsPerIntervalTotal$steps[stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]] / numberOfDates)
sum(is.na(dataNoNA$steps))
sum(is.na(data$steps))
stepsPerIntervalTotal$steps[stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]] / numberOfDates
stepsPerIntervalTotal$interval == dataNoNA$interval[which(is.na(dataNoNA))]
stepsPerIntervalTotal$steps[match(dataNoNA$interval, stepsPerIntervalTotal$interval)] / numberOfDates
stepsPerIntervalTotal$steps[match(dataNoNA$interval, stepsPerIntervalTotal$interval)] / numberOfDates
match(dataNoNA$interval, stepsPerIntervalTotal$interval)
transform(data, steps = ifelse(is.na(data$steps), steps_by_interval$steps[match(data$interval, steps_by_interval$interval)], data$steps))
